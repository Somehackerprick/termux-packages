--- ../TableGen.cmake.orig	2021-11-02 09:11:56.919733114 +0000
+++ ./llvm/cmake/modules/TableGen.cmake	2021-11-02 09:12:16.493112594 +0000
@@ -151,33 +151,6 @@
   set(${project}_TABLEGEN_EXE ${${project}_TABLEGEN} PARENT_SCOPE)
   set(${project}_TABLEGEN_TARGET ${${project}_TABLEGEN} PARENT_SCOPE)
 
-  if(LLVM_USE_HOST_TOOLS)
-    if( ${${project}_TABLEGEN} STREQUAL "${target}" )
-      # The NATIVE tablegen executable *must* depend on the current target one
-      # otherwise the native one won't get rebuilt when the tablgen sources
-      # change, and we end up with incorrect builds.
-      build_native_tool(${target} ${project}_TABLEGEN_EXE DEPENDS ${target})
-      set(${project}_TABLEGEN_EXE ${${project}_TABLEGEN_EXE} PARENT_SCOPE)
-
-      add_custom_target(${project}-tablegen-host DEPENDS ${${project}_TABLEGEN_EXE})
-      set(${project}_TABLEGEN_TARGET ${project}-tablegen-host PARENT_SCOPE)
-
-      # Create an artificial dependency between tablegen projects, because they
-      # compile the same dependencies, thus using the same build folders.
-      # FIXME: A proper fix requires sequentially chaining tablegens.
-      if (NOT ${project} STREQUAL LLVM AND TARGET ${project}-tablegen-host AND
-          TARGET LLVM-tablegen-host)
-        add_dependencies(${project}-tablegen-host LLVM-tablegen-host)
-      endif()
-
-      # If we're using the host tablegen, and utils were not requested, we have no
-      # need to build this tablegen.
-      if ( NOT LLVM_BUILD_UTILS )
-        set_target_properties(${target} PROPERTIES EXCLUDE_FROM_ALL ON)
-      endif()
-    endif()
-  endif()
-
   if ((${project} STREQUAL LLVM OR ${project} STREQUAL MLIR) AND NOT LLVM_INSTALL_TOOLCHAIN_ONLY AND LLVM_BUILD_UTILS)
     set(export_to_llvmexports)
     if(${target} IN_LIST LLVM_DISTRIBUTION_COMPONENTS OR
